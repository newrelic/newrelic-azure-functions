{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "newRelicLicenseKey": {
            "type": "string",
            "metadata": {
                "description": "New Relic License Key"
            }
        },
        "eventHubNamespace": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Event Hub Namespace where all logs to be forwarded to New Relic are being sent to. Leave this blank for a new namespace to be created automatically (its name will start with 'nrlogs-')."
            }
        },
        "eventHubName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Event Hub where all the Azure Platform logs are being sent to in order to be forwarded to New Relic. Leave this blank for a new Event Hub to be created automatically (its name will be 'nrlogs')."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Region where all resources included in this template will be deployed. Leave this blank to use the same region as the one of the resource group."
            }
        },
        "newRelicEndpoint": {
            "type": "string",
            "defaultValue": "https://log-api.newrelic.com/log/v1",
            "metadata": {
                "description": "The Logs API endpoint used to send your logs to. By default, it is https://log-api.newrelic.com/log/v1 if your account is in the United States (US) region. Otherwise, if you're in the European Union (EU) region, you should use https://log-api.eu.newrelic.com/log/v1"
            }
        },
        "logCustomAttributes": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "List of semicolon-separated custom attributes that you would like to enrich the forwarded logs with. This can be useful, for example, if you want to indicate common attributes shared by all the logs collected in this account, such as: 'environment:production;department:sales;country:Germany'"
            }
        },
        "maxRetriesToResendLogs": {
            "type": "int",
            "defaultValue": 3,
            "minValue": 1,
            "metadata": {
                "description": "Maximum number of attempts the forwarder function will perform in the event of a failure while sending your data."
            }
        },
        "retryInterval": {
            "type": "int",
            "defaultValue": 2000,
            "minValue": 100,
            "metadata": {
                "description": "Number of milliseconds to wait between consecutive retries to send the logs."
            }
        },
        "forwardAdministrativeAzureActivityLogs": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Contains the record of all create, update, delete, and action operations performed through Resource Manager. Examples of Administrative events include create virtual machine and delete network security group. Every action taken by a user or application using Resource Manager is modeled as an operation on a particular resource type. If the operation type is Write, Delete, or Action, the records of both the start and success or fail of that operation are recorded in the Administrative category. Administrative events also include any changes to Azure role-based access control in a subscription."
            }
        },
        "forwardAlertAzureActivityLogs": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Contains the record of activations for Azure alerts. An example of an Alert event is CPU % on myVM has been over 80 for the past 5 minutes."
            }
        },
        "forwardAutoscaleAzureActivityLogs": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Contains the record of any events related to the operation of the autoscale engine based on any autoscale settings you have defined in your subscription. An example of an Autoscale event is Autoscale scale up action failed."
            }
        },
        "forwardPolicyAzureActivityLogs": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Contains records of all effect action operations performed by Azure Policy. Examples of Policy events include Audit and Deny. Every action taken by Policy is modeled as an operation on a resource."
            }
        },
        "forwardRecommendationAzureActivityLogs": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Contains recommendation events from Azure Advisor."
            }
        },
        "forwardResourceHealthAzureActivityLogs": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Contains the record of any resource health events that have occurred to your Azure resources. An example of a Resource Health event is Virtual Machine health status changed to unavailable. Resource Health events can represent one of four health statuses: Available, Unavailable, Degraded, and Unknown. Additionally, Resource Health events can be categorized as being Platform Initiated or User Initiated."
            }
        },
        "forwardSecurityAzureActivityLogs": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Contains the record of any alerts generated by Azure Security Center. An example of a Security event is Suspicious double extension file executed."
            }
        },
        "forwardServiceHealthAzureActivityLogs": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Contains the record of any service health incidents that have occurred in Azure. An example of a Service Health event SQL Azure in East US is experiencing downtime. Service Health events come in Six varieties: Action Required, Assisted Recovery, Incident, Maintenance, Information, or Security. These events are only created if you have a resource in the subscription that would be impacted by the event."
            }
        },
        "disablePublicAccessToStorageAccount": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Disables public network access to the Storage Account (please note that even without enabling this option, access to the Storage Account is secured). As a consequence, communication with the Service Account will be performed through a private Virtual Network (VNet). Please note that due to this, the hosting pricing plan for the Function app server farm will need to be upgraded to 'Basic', as it is the minimum one providing VNet integration for Function apps (you can later upgrade this plan if you require more scaling options). Also note that the following extra resources will be created: a virtual network, a subnet, DNS zone names, virtual network links, private endpoints and a Storage Account file share."
            }
        }
    },
    "variables": {
        "location": "[if(equals(parameters('location'), ''), resourceGroup().location, parameters('location'))]",
        "onePerResourceGroupUniqueSuffix": "[uniqueString(resourceGroup().id)]",
        "createNewEventHubNamespace": "[equals(parameters('eventHubNamespace'), '')]",
        "eventHubNamespaceName": "[if(variables('createNewEventHubNamespace'), concat('nrlogs-eventhub-namespace-', variables('onePerResourceGroupUniqueSuffix')), parameters('eventHubNamespace'))]",
        "createNewEventHub": "[equals(parameters('eventHubName'), '')]",
        "eventHubName": "[if(variables('createNewEventHub'), 'nrlogs-eventhub', parameters('eventHubName'))]",
        "eventHubConsumerGroupName": "nrlogs-consumergroup",
        "logConsumerAuthorizationRuleName": "nrlogs-consumer-policy",
        "logProducerAuthorizationRuleName": "nrlogs-producer-policy",
        "storageAccountName": "[concat('nrlogs', variables('onePerResourceGroupUniqueSuffix'))]",
        "servicePlanName": "[concat('nrlogs-serviceplan-', variables('onePerResourceGroupUniqueSuffix'))]",
        "onePerResourceGroupAndEventHubUniqueSuffix": "[uniqueString(resourceGroup().id, variables('eventHubNamespaceName'), variables('eventHubName'))]",
        "functionAppName": "[concat('nrlogs-eventhubforwarder-', variables('onePerResourceGroupAndEventHubUniqueSuffix'))]",
        "activityLogsDiagnosticSettingName": "[concat('nrlogs-activity-log-diagnostic-setting-', variables('onePerResourceGroupAndEventHubUniqueSuffix'))]",
        "createActivityLogsDiagnosticSetting": "[or(parameters('forwardAdministrativeAzureActivityLogs'), parameters('forwardAlertAzureActivityLogs'), parameters('forwardAutoscaleAzureActivityLogs'), parameters('forwardPolicyAzureActivityLogs'), parameters('forwardRecommendationAzureActivityLogs'), parameters('forwardResourceHealthAzureActivityLogs'), parameters('forwardSecurityAzureActivityLogs'), parameters('forwardServiceHealthAzureActivityLogs'))]",
        "eventHubForwarderFunctionArtifact": "https://github.com/newrelic/newrelic-azure-functions/releases/latest/download/EventHubForwarder.zip",
        
        "virtualNetworkName": "[format('nrlogs{0}-virtual-network', variables('onePerResourceGroupUniqueSuffix'))]",
        "functionSubnetName": "[format('{0}-internal-functions-subnet', variables('virtualNetworkName'))]",
        "privateEndpointsSubnetName": "[format('{0}-private-endpoints-subnet', variables('virtualNetworkName'))]",

        "dnsSuffix": "[environment().suffixes.storage]",
        "privateStorageFileDnsZoneName": "[format('privatelink.file.{0}', variables('dnsSuffix'))]",
        "privateStorageBlobDnsZoneName": "[format('privatelink.blob.{0}', variables('dnsSuffix'))]",
        "privateStorageQueueDnsZoneName": "[format('privatelink.queue.{0}', variables('dnsSuffix'))]",
        "privateStorageTableDnsZoneName": "[format('privatelink.table.{0}', variables('dnsSuffix'))]",

        "privateStorageFileDnsZoneVirtualNetworkLinkName": "[format('{0}/{1}-link', variables('privateStorageFileDnsZoneName'), variables('virtualNetworkName'))]",
        "privateStorageBlobDnsZoneVirtualNetworkLinkName": "[format('{0}/{1}-link', variables('privateStorageBlobDnsZoneName'), variables('virtualNetworkName'))]",
        "privateStorageQueueDnsZoneVirtualNetworkLinkName": "[format('{0}/{1}-link', variables('privateStorageQueueDnsZoneName'), variables('virtualNetworkName'))]",
        "privateStorageTableDnsZoneVirtualNetworkLinkName": "[format('{0}/{1}-link', variables('privateStorageTableDnsZoneName'), variables('virtualNetworkName'))]",

        "privateEndpointStorageFileName": "[format('{0}-file-private-endpoint', variables('storageAccountName'))]",
        "privateEndpointStorageTableName": "[format('{0}-table-private-endpoint', variables('storageAccountName'))]",
        "privateEndpointStorageBlobName": "[format('{0}-blob-private-endpoint', variables('storageAccountName'))]",
        "privateEndpointStorageQueueName": "[format('{0}-queue-private-endpoint', variables('storageAccountName'))]",

        "privateEndpointPrivateDnsZoneGroupsStorageFileName": "[format('{0}/{1}', variables('privateEndpointStorageFileName'), 'filePrivateDnsZoneGroup')]",
        "privateEndpointPrivateDnsZoneGroupsStorageBlobName": "[format('{0}/{1}', variables('privateEndpointStorageBlobName'), 'blobPrivateDnsZoneGroup')]",
        "privateEndpointPrivateDnsZoneGroupsStorageTableName": "[format('{0}/{1}', variables('privateEndpointStorageTableName'), 'tablePrivateDnsZoneGroup')]",
        "privateEndpointPrivateDnsZoneGroupsStorageQueueName": "[format('{0}/{1}', variables('privateEndpointStorageQueueName'), 'queuePrivateDnsZoneGroup')]",

        "functionContentShareName": "[format('{0}-content-share', variables('functionAppName'))]",
        "storageAccountFileShareName": "[format('{0}/default/{1}', variables('storageAccountName'), variables('functionContentShareName'))]",

        "functionNetworkConfigName": "[format('{0}/{1}', variables('functionAppName'), 'virtualNetwork')]"
    },
    "resources": [
        {
            "type": "Microsoft.EventHub/namespaces",
            "apiVersion": "2017-04-01",
            "name": "[variables('eventHubNamespaceName')]",
            "condition": "[variables('createNewEventHubNamespace')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "Standard",
                "tier": "Standard",
                "capacity": 1
            },
            "properties": {}
        },
        {
            "type": "Microsoft.EventHub/namespaces/eventhubs",
            "apiVersion": "2017-04-01",
            "name": "[concat(variables('eventHubNamespaceName'), '/', variables('eventHubName'))]",
            "condition": "[variables('createNewEventHub')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces/', variables('eventHubNamespaceName'))]"
            ],
            "properties": {
                "messageRetentionInDays": 1
            }
        },
        {
            "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
            "name": "[concat(variables('eventHubNamespaceName'), '/', variables('eventHubName'), '/', variables('eventHubConsumerGroupName'))]",
            "apiVersion": "2017-04-01",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', variables('eventHubNamespaceName'), variables('eventHubName'))]"
            ],
            "properties": {}
        },
        {
            "type": "Microsoft.EventHub/namespaces/AuthorizationRules",
            "apiVersion": "2017-04-01",
            "name": "[concat(variables('eventHubNamespaceName'), '/', variables('logConsumerAuthorizationRuleName'))]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName'))]"
            ],
            "properties": {
                "rights": [
                    "Listen"
                ]
            }
        },
        {
            "type": "Microsoft.EventHub/namespaces/AuthorizationRules",
            "apiVersion": "2017-04-01",
            "name": "[concat(variables('eventHubNamespaceName'), '/', variables('logProducerAuthorizationRuleName'))]",
            "condition": "[variables('createActivityLogsDiagnosticSetting')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces/AuthorizationRules', variables('eventHubNamespaceName'), variables('logConsumerAuthorizationRuleName'))]"
            ],
            "properties": {
                "rights": [
                    "Send"
                ]
            }
        },
        {
            "condition": "[parameters('disablePublicAccessToStorageAccount')]",
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2022-09-01",
            "name": "[variables('virtualNetworkName')]",
            "location": "[variables('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "10.2.0.0/16"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('functionSubnetName')]",
                        "properties": {
                            "privateEndpointNetworkPolicies": "Enabled",
                            "privateLinkServiceNetworkPolicies": "Enabled",
                            "delegations": [
                            {
                                "name": "webapp",
                                "properties": {
                                "serviceName": "Microsoft.Web/serverFarms"
                                }
                            }
                            ],
                            "addressPrefix": "10.2.0.0/24"
                        }
                    },
                    {
                        "name": "[variables('privateEndpointsSubnetName')]",
                        "properties": {
                            "privateEndpointNetworkPolicies": "Disabled",
                            "privateLinkServiceNetworkPolicies": "Enabled",
                            "addressPrefix": "10.2.1.0/24"
                        }
                    }
                ]
            }
        },
        {
            "condition": "[parameters('disablePublicAccessToStorageAccount')]",
            "type": "Microsoft.Network/privateDnsZones",
            "apiVersion": "2020-06-01",
            "name": "[variables('privateStorageFileDnsZoneName')]",
            "location": "global"
        },
        {
            "condition": "[parameters('disablePublicAccessToStorageAccount')]",
            "type": "Microsoft.Network/privateDnsZones",
            "apiVersion": "2020-06-01",
            "name": "[variables('privateStorageBlobDnsZoneName')]",
            "location": "global"
        },
        {
            "condition": "[parameters('disablePublicAccessToStorageAccount')]",
            "type": "Microsoft.Network/privateDnsZones",
            "apiVersion": "2020-06-01",
            "name": "[variables('privateStorageQueueDnsZoneName')]",
            "location": "global"
        },
        {
            "condition": "[parameters('disablePublicAccessToStorageAccount')]",
            "type": "Microsoft.Network/privateDnsZones",
            "apiVersion": "2020-06-01",
            "name": "[variables('privateStorageTableDnsZoneName')]",
            "location": "global"
        },
        {
            "condition": "[parameters('disablePublicAccessToStorageAccount')]",
            "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
            "apiVersion": "2020-06-01",
            "name": "[variables('privateStorageFileDnsZoneVirtualNetworkLinkName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageFileDnsZoneName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
            ],
            "location": "global",
            "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
                }
            }
        },
        {
            "condition": "[parameters('disablePublicAccessToStorageAccount')]",
            "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
            "apiVersion": "2020-06-01",
            "name": "[variables('privateStorageBlobDnsZoneVirtualNetworkLinkName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageBlobDnsZoneName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
            ],
            "location": "global",
            "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
                }
            }
        },
        {
            "condition": "[parameters('disablePublicAccessToStorageAccount')]",
            "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
            "apiVersion": "2020-06-01",
            "name": "[variables('privateStorageQueueDnsZoneVirtualNetworkLinkName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageQueueDnsZoneName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
            ],
            "location": "global",
            "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
                }
            }
        },
        {
            "condition": "[parameters('disablePublicAccessToStorageAccount')]",
            "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
            "apiVersion": "2020-06-01",
            "name": "[variables('privateStorageTableDnsZoneVirtualNetworkLinkName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageTableDnsZoneName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
            ],
            "location": "global",
            "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
                }
            }
        },
        {
            "condition": "[parameters('disablePublicAccessToStorageAccount')]",
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2022-05-01",
            "name": "[variables('privateEndpointStorageFileName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
            ],
            "location": "[variables('location')]",
            "properties": {
                "subnet": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('privateEndpointsSubnetName'))]"
                },
                "privateLinkServiceConnections": [
                    {
                        "name": "MyStorageFilePrivateLinkConnection",
                        "properties": {
                            "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                            "groupIds": [
                                "file"
                            ]
                        }
                    }
                ]
            }
        },
        {
            "condition": "[parameters('disablePublicAccessToStorageAccount')]",
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2022-05-01",
            "name": "[variables('privateEndpointStorageBlobName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
            ],
            "location": "[variables('location')]",
            "properties": {
                "subnet": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('privateEndpointsSubnetName'))]"
                },
                "privateLinkServiceConnections": [
                    {
                        "name": "MyStorageBlobPrivateLinkConnection",
                        "properties": {
                            "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                            "groupIds": [
                                "blob"
                            ]
                        }
                    }
                ]
            }
        },
        {
            "condition": "[parameters('disablePublicAccessToStorageAccount')]",
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2022-05-01",
            "name": "[variables('privateEndpointStorageTableName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
            ],
            "location": "[variables('location')]",
            "properties": {
                "subnet": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('privateEndpointsSubnetName'))]"
                },
                "privateLinkServiceConnections": [
                    {
                        "name": "MyStorageTablePrivateLinkConnection",
                        "properties": {
                            "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                            "groupIds": [
                                "table"
                            ]
                        }
                    }
                ]
            }
        },
        {
            "condition": "[parameters('disablePublicAccessToStorageAccount')]",
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2022-05-01",
            "name": "[variables('privateEndpointStorageQueueName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
            ],
            "location": "[variables('location')]",
            "properties": {
                "subnet": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('privateEndpointsSubnetName'))]"
                },
                "privateLinkServiceConnections": [
                    {
                        "name": "MyStorageQueuePrivateLinkConnection",
                        "properties": {
                            "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                            "groupIds": [
                                "queue"
                            ]
                        }
                    }
                ]
            }
        },
        {
            "condition": "[parameters('disablePublicAccessToStorageAccount')]",
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
            "apiVersion": "2022-05-01",
            "name": "[variables('privateEndpointPrivateDnsZoneGroupsStorageFileName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointStorageFileName'))]",
                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageFileDnsZoneName'))]"
            ],
            "properties": {
                "privateDnsZoneConfigs": [
                    {
                        "name": "config",
                        "properties": {
                            "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageFileDnsZoneName'))]"
                        }
                    }
                ]
            }
        },
        {
            "condition": "[parameters('disablePublicAccessToStorageAccount')]",
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
            "apiVersion": "2022-05-01",
            "name": "[variables('privateEndpointPrivateDnsZoneGroupsStorageBlobName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointStorageBlobName'))]",
                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageBlobDnsZoneName'))]"
            ],
            "properties": {
                "privateDnsZoneConfigs": [
                    {
                        "name": "config",
                        "properties": {
                            "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageBlobDnsZoneName'))]"
                        }
                    }
                ]
            }
        },
        {
            "condition": "[parameters('disablePublicAccessToStorageAccount')]",
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
            "apiVersion": "2022-05-01",
            "name": "[variables('privateEndpointPrivateDnsZoneGroupsStorageTableName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointStorageTableName'))]",
                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageTableDnsZoneName'))]"
            ],
            "properties": {
                "privateDnsZoneConfigs": [
                    {
                        "name": "config",
                        "properties": {
                            "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageTableDnsZoneName'))]"
                        }
                    }
                ]
            }
        },
        {
            "condition": "[parameters('disablePublicAccessToStorageAccount')]",
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
            "apiVersion": "2022-05-01",
            "name": "[variables('privateEndpointPrivateDnsZoneGroupsStorageQueueName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointStorageQueueName'))]",
                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageQueueDnsZoneName'))]"
            ],
            "properties": {
                "privateDnsZoneConfigs": [
                    {
                        "name": "config",
                        "properties": {
                            "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageQueueDnsZoneName'))]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2021-04-01",
            "name": "[variables('storageAccountName')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "StorageV2",
            "properties": {
                "publicNetworkAccess": "[if(parameters('disablePublicAccessToStorageAccount'), 'Disabled', 'Enabled')]",
                "allowBlobPublicAccess": false,
                "networkAcls": "[if(parameters('disablePublicAccessToStorageAccount'), json('{\"bypass\": \"None\", \"defaultAction\": \"Deny\"}'), json('null'))]"
            }
        },
        {
            "condition": "[parameters('disablePublicAccessToStorageAccount')]",
            "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
            "apiVersion": "2022-05-01",
            "name": "[variables('storageAccountFileShareName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ]
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2022-09-01",
            "kind": "[if(parameters('disablePublicAccessToStorageAccount'), 'app', 'functionapp')]",
            "location": "[variables('location')]",
            "name": "[variables('servicePlanName')]",
            "sku": "[if(parameters('disablePublicAccessToStorageAccount'), json('{ \"name\":\"B1\", \"tier\": \"Basic\", \"capacity\": 1 }'), json('{ \"name\": \"Y1\", \"tier\": \"Dynamic\" }'))]",
            "properties": "[ if(parameters('disablePublicAccessToStorageAccount'), json('{ \"maximumElasticWorkerCount\": 1 }'), json(concat('{ \"name\": \"', variables('servicePlanName'), '\", \"targetWorkerCount\": 1, \"targetWorkerSizeId\": 1, \"workerSize\": \"1\", \"numberOfWorkers\": 1, \"computeMode\": \"Dynamic\" }'))) ]"
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2020-12-01",
            "name": "[variables('functionAppName')]",
            "location": "[variables('location')]",
            "kind": "functionapp",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "[resourceId('Microsoft.Web/serverfarms', variables('servicePlanName'))]",
                "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', variables('privateEndpointStorageBlobName'), 'blobPrivateDnsZoneGroup')]",
                "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', variables('privateEndpointStorageFileName'), 'filePrivateDnsZoneGroup')]",
                "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', variables('privateEndpointStorageQueueName'), 'queuePrivateDnsZoneGroup')]",
                "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', variables('privateEndpointStorageTableName'), 'tablePrivateDnsZoneGroup')]",
                "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', variables('privateStorageBlobDnsZoneName'), format('{0}-link', variables('virtualNetworkName')))]",
                "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', variables('privateStorageFileDnsZoneName'), format('{0}-link', variables('virtualNetworkName')))]",
                "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', variables('privateStorageQueueDnsZoneName'), format('{0}-link', variables('virtualNetworkName')))]",
                "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', variables('privateStorageTableDnsZoneName'), format('{0}-link', variables('virtualNetworkName')))]",
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', variables('storageAccountName'), 'default', variables('functionContentShareName'))]"
            ],
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('servicePlanName'))]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "EVENTHUB_NAME",
                            "value": "[variables('eventHubName')]"
                        },
                        {
                            "name": "EVENTHUB_CONSUMER_CONNECTION",
                            "value": "[listKeys(resourceId('Microsoft.EventHub/namespaces/AuthorizationRules', variables('eventHubNamespaceName'), variables('logConsumerAuthorizationRuleName')),'2017-04-01').primaryConnectionString]"
                        },
                        {
                            "name": "EVENTHUB_CONSUMER_GROUP",
                            "value": "[variables('eventHubConsumerGroupName')]"
                        },
                        {
                            "name": "NR_LICENSE_KEY",
                            "value": "[parameters('newRelicLicenseKey')]"
                        },
                        {
                            "name": "NR_ENDPOINT",
                            "value": "[parameters('newRelicEndpoint')]"
                        },
                        {
                            "name": "NR_TAGS",
                            "value": "[parameters('logCustomAttributes')]"
                        },
                        {
                            "name": "NR_MAX_RETRIES",
                            "value": "[parameters('maxRetriesToResendLogs')]"
                        },
                        {
                            "name": "NR_RETRY_INTERVAL",
                            "value": "[parameters('retryInterval')]"
                        },
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~4"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "node"
                        },
                        {
                            "name": "WEBSITE_NODE_DEFAULT_VERSION",
                            "value": "~16"
                        },
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-04-01').keys[0].value,';EndpointSuffix=',environment().suffixes.storage)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-04-01').keys[0].value,';EndpointSuffix=',environment().suffixes.storage)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTSHARE",
                            "value": "[variables('functionContentShareName')]"
                        },
                        {
                            "name": "WEBSITE_CONTENTOVERVNET",
                            "value": "[if(parameters('disablePublicAccessToStorageAccount'), '1', '0')]"
                        },
                        {
                            "name": "WEBSITE_RUN_FROM_PACKAGE",
                            "value": "[if(parameters('disablePublicAccessToStorageAccount'), variables('eventHubForwarderFunctionArtifact'),'0')]"
                        }
                    ],
                    "alwaysOn": "[parameters('disablePublicAccessToStorageAccount')]",
                    "ftpsState": "Disabled",
                    "publicNetworkAccess": "[if(parameters('disablePublicAccessToStorageAccount'), 'Disabled', 'Enabled')]"
                },
                "httpsOnly": true
            }
        },
        {
            "condition": "[not(parameters('disablePublicAccessToStorageAccount'))]",
            "type": "Microsoft.Web/sites/extensions",
            "name": "[concat(variables('functionAppName'), '/ZipDeploy')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
            ],
            "apiVersion": "2020-12-01",
            "properties": {
                "packageUri": "[variables('eventHubForwarderFunctionArtifact')]"
            }
        },
        {
            "condition": "[parameters('disablePublicAccessToStorageAccount')]",
            "type": "Microsoft.Web/sites/networkConfig",
            "apiVersion": "2022-03-01",
            "name": "[variables('functionNetworkConfigName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
            ],
            "properties": {
                "subnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('functionSubnetName'))]",
                "swiftSupported": true
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "activityLogsDiagnosticSettingsAtSubscriptionLevelDeployment",
            "condition": "[variables('createActivityLogsDiagnosticSetting')]",
            "location": "[variables('location')]",
            "subscriptionId": "[subscription().subscriptionId]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', variables('eventHubNamespaceName'), variables('eventHubName'))]",
                "[resourceId('Microsoft.EventHub/namespaces/AuthorizationRules', variables('eventHubNamespaceName'), variables('logProducerAuthorizationRuleName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "type": "Microsoft.Insights/diagnosticSettings",
                            "apiVersion": "2017-05-01-preview",
                            "name": "[variables('activityLogsDiagnosticSettingName')]",
                            "properties": {
                                "eventHubAuthorizationRuleId": "[resourceId(subscription().subscriptionId, resourceGroup().name, 'Microsoft.EventHub/namespaces/AuthorizationRules', variables('eventHubNamespaceName'), variables('logProducerAuthorizationRuleName'))]",
                                "eventHubName": "[variables('eventHubName')]",
                                "logs": [
                                    {
                                        "category": "Administrative",
                                        "enabled": "[parameters('forwardAdministrativeAzureActivityLogs')]"
                                    },
                                    {
                                        "category": "Security",
                                        "enabled": "[parameters('forwardSecurityAzureActivityLogs')]"
                                    },
                                    {
                                        "category": "ServiceHealth",
                                        "enabled": "[parameters('forwardServiceHealthAzureActivityLogs')]"
                                    },
                                    {
                                        "category": "Alert",
                                        "enabled": "[parameters('forwardAlertAzureActivityLogs')]"
                                    },
                                    {
                                        "category": "Recommendation",
                                        "enabled": "[parameters('forwardRecommendationAzureActivityLogs')]"
                                    },
                                    {
                                        "category": "Policy",
                                        "enabled": "[parameters('forwardPolicyAzureActivityLogs')]"
                                    },
                                    {
                                        "category": "Autoscale",
                                        "enabled": "[parameters('forwardAutoscaleAzureActivityLogs')]"
                                    },
                                    {
                                        "category": "ResourceHealth",
                                        "enabled": "[parameters('forwardResourceHealthAzureActivityLogs')]"
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        }
    ],
    "outputs": {
        "connectionString": {
            "type": "String",
            "value": "[listKeys(resourceId('Microsoft.EventHub/namespaces/AuthorizationRules', variables('eventHubNamespaceName'), variables('logConsumerAuthorizationRuleName')),'2017-04-01').primaryConnectionString]"
        },
        "eventHubName": {
            "type": "string",
            "value": "[variables('eventHubName')]"
        }
    }
}
